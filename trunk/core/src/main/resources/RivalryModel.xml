<?xml version="1.0" encoding="UTF-8"?>
<tns:CGSpec xmlns:tns="http://core.jfab.org/model"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://core.jfab.org/model http://jfab.googlecode.com/svn/trunk/trunk/core/src/main/resources/CodeGenerator.xsd">

    <!-- Entity -->
    <interface propertyChangeSupported="true">
        <commentLine>Defines methods required by an entity for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>Entity</name>
        <packageName>org.rivalry.core.model</packageName>
        <propertyExemplar getter="true" setter="true">
            <name>placeholder</name>
            <type>
                <name>String</name>
            </type>
        </propertyExemplar>
        <property>
            <name>description</name>
            <type>
                <name>String</name>
            </type>
        </property>
        <property>
            <name>name</name>
            <type>
                <name>String</name>
            </type>
        </property>
    </interface>

    <!-- Category -->
    <interface propertyChangeSupported="true">
        <commentLine>Defines methods required by a category for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>Category</name>
        <packageName>org.rivalry.core.model</packageName>
        <extendsType>
            <packageName>org.rivalry.core.model</packageName>
            <name>Entity</name>
        </extendsType>
    </interface>

    <!-- Criterion -->
    <interface propertyChangeSupported="true">
        <commentLine>Defines methods required by a criterion for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>Criterion</name>
        <packageName>org.rivalry.core.model</packageName>
        <extendsType>
            <packageName>org.rivalry.core.model</packageName>
            <name>Entity</name>
        </extendsType>
        <propertyExemplar getter="true" setter="true">
            <name>placeholder</name>
            <type>
                <name>String</name>
            </type>
        </propertyExemplar>
        <property usedInIdentity="false">
            <name>autoMinMax</name>
            <type>
                <name>boolean</name>
            </type>
        </property>
        <property usedInIdentity="false">
            <name>category</name>
            <type>
                <packageName>org.rivalry.core.model</packageName>
                <name>Category</name>
            </type>
        </property>
        <property usedInIdentity="false">
            <name>maximumRating</name>
            <type>
                <name>Double</name>
            </type>
        </property>
        <property usedInIdentity="false">
            <name>minimumRating</name>
            <type>
                <name>Double</name>
            </type>
        </property>
    </interface>

    <!-- Candidate -->
    <interface propertyChangeSupported="true">
        <commentLine>Defines methods required by a candidate for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>Candidate</name>
        <packageName>org.rivalry.core.model</packageName>
        <extendsType>
            <packageName>org.rivalry.core.model</packageName>
            <name>Entity</name>
        </extendsType>
        <propertyExemplar getter="true" setter="true">
            <name>placeholder</name>
            <type>
                <name>String</name>
            </type>
        </propertyExemplar>
        <property usedInIdentity="false">
            <name>page</name>
            <type>
                <name>String</name>
            </type>
        </property>
        <property usedInIdentity="false">
            <name>values</name>
            <type>
                <packageName>java.util</packageName>
                <name>Map</name>
                <typeParameter>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </typeParameter>
                <typeParameter>
                    <name>Object</name>
                </typeParameter>
            </type>
            <initialValue>new LinkedHashMap&lt;Criterion, Object&gt;()</initialValue>
        </property>
        <method>
            <commentLine>@param   criterion  Criterion.</commentLine>
            <commentLine></commentLine>
            <commentLine>@return  the rating for the given parameter.</commentLine>
            <name>getRating</name>
            <returnType>
                <name>Double</name>
            </returnType>
            <parameter>
                <name>criterion</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </type>
            </parameter>
        </method>
        <method>
            <commentLine>@param   criterion  Criterion.</commentLine>
            <commentLine></commentLine>
            <commentLine>@return  the value for the given parameter.</commentLine>
            <name>getValue</name>
            <returnType>
                <name>Object</name>
            </returnType>
            <parameter>
                <name>criterion</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </type>
            </parameter>
        </method>
        <method>
            <commentLine>Store the given value for the given criterion.</commentLine>
            <commentLine></commentLine>
            <commentLine>@param  criterion  Criterion.</commentLine>
            <commentLine>@param  value      Value.</commentLine>
            <name>putValue</name>
            <parameter>
                <name>criterion</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>
                    <name>Object</name>
                </type>
            </parameter>
        </method>
    </interface>

    <!-- DefaultEntity -->
    <class propertyChangeSupported="true">
        <commentLine>Provides a default entity for a decision making application.</commentLine>
        <modifier>abstract</modifier>
        <name>DefaultEntity</name>
        <packageName>org.rivalry.core.model</packageName>
        <implementsInterface>
            <packageName>org.rivalry.core.model</packageName>
            <name>Entity</name>
        </implementsInterface>
    </class>

    <!-- DefaultCandidate -->
    <class propertyChangeSupported="true">
        <commentLine>Provides a default candidate for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>DefaultCandidate</name>
        <packageName>org.rivalry.core.model</packageName>
        <extendsType>
            <packageName>org.rivalry.core.model</packageName>
            <name>DefaultEntity</name>
        </extendsType>
        <implementsInterface>
            <packageName>org.rivalry.core.model</packageName>
            <name>Candidate</name>
        </implementsInterface>
        <method>
            <referencedType>
                <packageName>java.util</packageName>
                <name>LinkedHashMap</name>
            </referencedType>
            <annotation>
                <type>
                    <name>Override</name>
                </type>
            </annotation>
            <modifier>public</modifier>
            <name>getRating</name>
            <returnType>
                <name>Double</name>
            </returnType>
            <parameter>
                <name>criterion</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </type>
            </parameter>
            <methodBodyLine>Double answer = null;</methodBodyLine>
            <methodBodyLine>Object value = getValue(criterion);</methodBodyLine>
            <methodBodyLine>if (value instanceof Double)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = (Double)value;</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>else if (value instanceof Integer)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = ((Integer)value).doubleValue();</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>else if (value instanceof Float)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = ((Float)value).doubleValue();</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>else if (value instanceof Long)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = ((Long)value).doubleValue();</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>else if (value instanceof Short)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = ((Short)value).doubleValue();</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>return answer;</methodBodyLine>
        </method>
        <method>
            <referencedType>
                <packageName>java.util</packageName>
                <name>LinkedHashMap</name>
            </referencedType>
            <annotation>
                <type>
                    <name>Override</name>
                </type>
            </annotation>
            <modifier>public</modifier>
            <name>getValue</name>
            <returnType>
                <name>Object</name>
            </returnType>
            <parameter>
                <name>criterion</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </type>
            </parameter>
            <methodBodyLine>if (_values == null)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>_values = new LinkedHashMap&lt;Criterion, Object&gt;();</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>return _values.get(criterion);</methodBodyLine>
        </method>
        <method>
            <annotation>
                <type>
                    <name>Override</name>
                </type>
            </annotation>
            <modifier>public</modifier>
            <name>putValue</name>
            <parameter>
                <name>criterion</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>
                    <name>Object</name>
                </type>
            </parameter>
            <methodBodyLine>_values.put(criterion, value);</methodBodyLine>
        </method>
    </class>

    <!-- DefaultCategory -->
    <class>
        <commentLine>Provides a default category for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>DefaultCategory</name>
        <packageName>org.rivalry.core.model</packageName>
        <extendsType>
            <packageName>org.rivalry.core.model</packageName>
            <name>DefaultEntity</name>
        </extendsType>
        <implementsInterface>
            <packageName>org.rivalry.core.model</packageName>
            <name>Category</name>
        </implementsInterface>
    </class>

    <!-- DefaultCriterion -->
    <class propertyChangeSupported="true">
        <commentLine>Provides a default criterion for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>DefaultCriterion</name>
        <packageName>org.rivalry.core.model</packageName>
        <extendsType>
            <packageName>org.rivalry.core.model</packageName>
            <name>DefaultEntity</name>
        </extendsType>
        <implementsInterface>
            <packageName>org.rivalry.core.model</packageName>
            <name>Criterion</name>
        </implementsInterface>
    </class>

    <!-- RivalryData -->
    <class>
        <referencedType>
            <packageName>java.util</packageName>
            <name>ArrayList</name>
        </referencedType>
        <commentLine>Provides a data bean for a decision making application.</commentLine>
        <modifier>public</modifier>
        <name>RivalryData</name>
        <packageName>org.rivalry.core.model</packageName>
        <fieldExemplar getter="true" setter="true">
            <modifier>private</modifier>
            <name>placeholder</name>
            <type>
                <name>String</name>
            </type>
        </fieldExemplar>
        <field>
            <name>_candidates</name>
            <type>
                <packageName>java.util</packageName>
                <name>List</name>
                <typeParameter>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Candidate</name>
                </typeParameter>
            </type>
            <initialValue>new ArrayList&lt;org.rivalry.core.model.Candidate&gt;()</initialValue>
        </field>
        <field>
            <name>_categories</name>
            <type>
                <packageName>java.util</packageName>
                <name>List</name>
                <typeParameter>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Category</name>
                </typeParameter>
            </type>
            <initialValue>new ArrayList&lt;Category&gt;()</initialValue>
        </field>
        <field>
            <name>_createDate</name>
            <type>
                <packageName>java.util</packageName>
                <name>Date</name>
            </type>
            <initialValue>new Date()</initialValue>
        </field>
        <field>
            <name>_criteria</name>
            <type>
                <packageName>java.util</packageName>
                <name>List</name>
                <typeParameter>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </typeParameter>
            </type>
            <initialValue>new ArrayList&lt;Criterion&gt;()</initialValue>
        </field>
        <field>
            <name>_description</name>
            <type>
                <name>String</name>
            </type>
        </field>
        <field>
            <name>_preferencePrefix</name>
            <type>
                <name>String</name>
            </type>
        </field>
        <method>
            <referencedType>
                <packageName>org.apache.commons.lang</packageName>
                <name>StringUtils</name>
            </referencedType>
            <commentLine>@param name Name.</commentLine>
            <commentLine></commentLine>
            <commentLine>@return the candidate of the given name, if any.</commentLine>
            <modifier>public</modifier>
            <name>findCandidateByName</name>
            <returnType>
                <packageName>org.rivalry.core.model</packageName>
                <name>Candidate</name>
            </returnType>
            <parameter>
                <name>name</name>
                <type>
                    <name>String</name>
                </type>
            </parameter>
            <methodBodyLine>Candidate answer = null;</methodBodyLine>
            <methodBodyLine>if (StringUtils.isNotEmpty(name))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>List&lt;Candidate&gt; candidates = getCandidates();</methodBodyLine>
            <methodBodyLine>int size = candidates.size();</methodBodyLine>
            <methodBodyLine>for (int i=0; answer==null &amp;&amp; i&lt;size; i++)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>Candidate candidate = candidates.get(i);</methodBodyLine>
            <methodBodyLine>if (name.equals(candidate.getName()))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = candidate;</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine></methodBodyLine>
            <methodBodyLine>return answer;</methodBodyLine>
        </method>
        <method>
            <referencedType>
                <packageName>org.apache.commons.lang</packageName>
                <name>StringUtils</name>
            </referencedType>
            <commentLine>@param name Name.</commentLine>
            <commentLine></commentLine>
            <commentLine>@return the category of the given name, if any.</commentLine>
            <modifier>public</modifier>
            <name>findCategoryByName</name>
            <returnType>
                <packageName>org.rivalry.core.model</packageName>
                <name>Category</name>
            </returnType>
            <parameter>
                <name>name</name>
                <type>
                    <name>String</name>
                </type>
            </parameter>
            <methodBodyLine>Category answer = null;</methodBodyLine>
            <methodBodyLine>if (StringUtils.isNotEmpty(name))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>List&lt;Category&gt; categories = getCategories();</methodBodyLine>
            <methodBodyLine>int size = categories.size();</methodBodyLine>
            <methodBodyLine>for (int i=0; answer==null &amp;&amp; i&lt;size; i++)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>Category category = categories.get(i);</methodBodyLine>
            <methodBodyLine>if (name.equals(category.getName()))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = category;</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine></methodBodyLine>
            <methodBodyLine>return answer;</methodBodyLine>
        </method>
        <method>
            <commentLine>@param category Category.</commentLine>
            <commentLine></commentLine>
            <commentLine>@return the criteria of the given category, if any.</commentLine>
            <modifier>public</modifier>
            <name>findCriteriaByCategory</name>
            <returnType>
                <packageName>java.util</packageName>
                <name>List</name>
                <typeParameter>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Criterion</name>
                </typeParameter>
            </returnType>
            <parameter>
                <name>category</name>
                <type>
                    <packageName>org.rivalry.core.model</packageName>
                    <name>Category</name>
                </type>
            </parameter>
            <methodBodyLine>List&lt;Criterion&gt; answer = new ArrayList&lt;Criterion&gt;();</methodBodyLine>
            <methodBodyLine>if (category != null)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>List&lt;Criterion&gt; criteria = getCriteria();</methodBodyLine>
            <methodBodyLine>int size = criteria.size();</methodBodyLine>
            <methodBodyLine>for (int i=0; i&lt;size; i++)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>Criterion criterion = criteria.get(i);</methodBodyLine>
            <methodBodyLine>if (category.equals(criterion.getCategory()))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer.add(criterion);</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine></methodBodyLine>
            <methodBodyLine>return answer;</methodBodyLine>
        </method>
        <method>
            <referencedType>
                <packageName>org.apache.commons.lang</packageName>
                <name>StringUtils</name>
            </referencedType>
            <commentLine>@param name Name.</commentLine>
            <commentLine></commentLine>
            <commentLine>@return the criterion of the given name, if any.</commentLine>
            <modifier>public</modifier>
            <name>findCriterionByName</name>
            <returnType>
                <packageName>org.rivalry.core.model</packageName>
                <name>Criterion</name>
            </returnType>
            <parameter>
                <name>name</name>
                <type>
                    <name>String</name>
                </type>
            </parameter>
            <methodBodyLine>Criterion answer = null;</methodBodyLine>
            <methodBodyLine>if (StringUtils.isNotEmpty(name))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>List&lt;Criterion&gt; criteria = getCriteria();</methodBodyLine>
            <methodBodyLine>int size = criteria.size();</methodBodyLine>
            <methodBodyLine>for (int i=0; answer==null &amp;&amp; i&lt;size; i++)</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>Criterion criterion = criteria.get(i);</methodBodyLine>
            <methodBodyLine>if (name.equals(criterion.getName()))</methodBodyLine>
            <methodBodyLine>{</methodBodyLine>
            <methodBodyLine>answer = criterion;</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine>}</methodBodyLine>
            <methodBodyLine></methodBodyLine>
            <methodBodyLine>return answer;</methodBodyLine>
        </method>
    </class>
</tns:CGSpec>
